// express framewokr...
import express from 'express';
// cors middleware to handle cross-origin request...
import cors from 'cors';
//loggings...
import logging from './config/logging';
//middleware to handle the loggings...
import { loggingHandler } from './middleware/loggingMiddleware';
import { routeNotFound } from './middleware/routeNotFoundMiddleware';
//import { sendWhatsAppMessage } from './utils/whatsappSender';
//import { client } from './config/wahtsAppClien';
// routes...
import userRoutes from './routes/usersRoutes'; //users...
import emailRoutes from './routes/emailsRoutes'; // emails...
import resumeRoutes from './routes/resumeRoutes'; // resume...


//create an instance of the express application...
const app = express();
// use cors...
app.use(cors());
//
app.use(express.urlencoded({ extended: true }));
// use middleware to parse JSON request bodies...
app.use(express.json());

//Logging handler here...
logging.info('Logging & configuration');
app.use(loggingHandler);

// start the whats app web.js client...
//client.initialize();

// routes...
//NOTE: add a static file (HTML) to indicate that this PAI is a private one...
app.get('/', (_, res) => {
    res.send('this is the root.');
});

// TODO: pensar en colocar esto en un archivo por separado, para mejor orden...
// users routes...
app.use('/users', userRoutes);
// emails routes...
app.use('/emails', emailRoutes);
// resume routes...
app.use('/resume', resumeRoutes);

//this middleware helps us to send an error messages if any route doesn't exist...
app.use(routeNotFound);

export default app;